import { Constructor } from './types.js';
import { ProjectionScope } from './projection.js';
/**
 * Применяет правила проекции OUTPUT к объекту или массиву объектов,
 * удаляя или рекурсивно обрабатывая поля на основе метаданных модели.
 * Не модифицирует исходные данные.
 *
 * @param model Конструктор класса модели с метаданными проекции.
 * @param data Объект или массив объектов для обработки.
 *
 * @returns Новый объект или массив объектов с примененными правилами
 *   проекции OUTPUT, или исходное значение, если data не объект/массив.
 */
export declare function applyProjection<T>(model: Constructor, data: T): T;
/**
 * Применяет правила проекции к объекту или массиву объектов для указанной
 * области, удаляя или рекурсивно обрабатывая поля на основе метаданных модели.
 * Не модифицирует исходные данные.
 *
 * @param scope Область применения правил (INPUT или OUTPUT).
 * @param model Конструктор класса модели с метаданными проекции.
 * @param data Объект или массив объектов для обработки.
 *
 * @returns Новый объект или массив объектов с примененными
 *   правилами проекции, или исходное значение, если data не объект/массив.
 */
export declare function applyProjection<T>(scope: ProjectionScope, model: Constructor, data: T): T;
